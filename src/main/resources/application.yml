server:
  port: 80
spring:
  kafka:
    bootstrap-servers: 192.168.204.132:9092
    producer:
      # 发生错误后，消息重发的次数。
      retries: 0
      #当有多个消息需要被发送到同一个分区时，生产者会把它们放在同一个批次里。该参数指定了一个批次可以使用的内存大小，按照字节数计算。
      batch-size: 16384
      # 设置生产者内存缓冲区的大小。
      buffer-memory: 33554432
      # 键的序列化方式
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      # 值的序列化方式
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
      # acks=0 ： 生产者在成功写入消息之前不会等待任何来自服务器的响应。
      # acks=1 ： 只要集群的首领节点收到消息，生产者就会收到一个来自服务器成功响应。
      # acks=all ：只有当所有参与复制的节点全部收到消息时，生产者才会收到一个来自服务器的成功响应。
      acks: 1
    consumer:
      # 自动提交的时间间隔 在spring boot 2.X 版本中这里采用的是值的类型为Duration 需要符合特定的格式，如1S,1M,2H,5D
      auto-commit-interval: 1S
      # 该属性指定了消费者在读取一个没有偏移量的分区或者偏移量无效的情况下该作何处理：
      # latest（默认值）在偏移量无效的情况下，消费者将从最新的记录开始读取数据（在消费者启动之后生成的记录）
      # earliest ：在偏移量无效的情况下，消费者将从起始位置读取分区的记录
      auto-offset-reset: earliest
      # 是否自动提交偏移量，默认值是true,为了避免出现重复数据和数据丢失，可以把它设置为false,然后手动提交偏移量
      enable-auto-commit: false
      # 键的反序列化方式
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      # 值的反序列化方式
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
    listener:
      # 在侦听器容器中运行的线程数。
      concurrency: 5
      #listner负责ack，每调用一次，就立即commit
      ack-mode: manual_immediate
      missing-topics-fatal: false

  datasource:
    username: root
    password: root
    url: jdbc:mysql://192.168.204.132:3306/mall?useUnicode=true&characterEncoding=UTF-8&autoReconnect=true&failOverReadOnly=false
    driver-class-name: com.mysql.cj.jdbc.Driver
    type: com.alibaba.druid.pool.DruidDataSource
    druid:
      #监控统计拦截的过滤器 不加监控界面sql无法统计 wall用于防火墙
      filters: stat,wall,log4j,config
      #最大连接数
      max-active: 100
      #初始化大小
      initial-size: 1
      #获取连接最大等待时间
      max-wait: 60000
      min-idle: 1
      #间隔多久检测一次需要关闭的空闲连接 毫秒
      time-between-eviction-runs-millis: 60000
      #连接在连接池中最小生存的时间，毫秒
      min-evictable-idle-time-millis: 300000
      validation-query: select 'x'
      test-while-idle: true
      test-on-borrow: false
      test-on-return: false
      pool-prepared-statements: true
      max-open-prepared-statements: 50
      max-pool-prepared-statement-per-connection-size: 20
      web-stat-filter:
        exclusions: "*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*"
        url-pattern: /*
      stat-view-servlet:
        #白名单IP
        allow: 127.0.0.1
        #黑名单IP
        deny: 192.168.0.106
        #登录账号和密码
        login-username: admin
        login-password: admin
        #启用重置数据功能
        reset-enable: true

  thymeleaf:
    mode: HTML5
    encoding: UTF-8
    servlet:
      content-type: text/html
    cache: false
    prefix: classpath:/templates/
    suffix: .html
  mvc:
    static-path-pattern: /static/**
  resources:
    add-mappings: true
  rabbitmq:
    host: 192.168.204.132
    password: mall
    username: mall
    virtual-host: /mall
    port: 5672
    #开启 confirm 确认机制
    publisher-confirms: true
    #开启 return 确认机制
    publisher-returns: true
    #设置为 true 后 消费者在消息没有被路由到合适队列情况下会被return监听，而不会自动删除
    template:
      mandatory: true


  redis:
    host: 192.168.204.132
    port: 6379
    lettuce:
      shutdown-timeout: 0
    jedis:
      pool:
        max-active: 8
        max-wait: -1
        max-idle: 500
        min-idle: 0
  data:
    mongodb:
      host: 192.168.204.132
      port: 2017

mybatis:
  mapper-locations: classpath:mapper/*Mapper.xml
  configuration:
    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl
#showSql
logging:
  level:
    com.luck.demo.mapper: debug
  config: classpath:logback-spring.xml
  path: D:/slog
#D:\Spring_code\SpringBoot_Mybatis\src\main\resources\logback-spring.xml
#        日志的方式打印sql
#        logging:
#          level:
